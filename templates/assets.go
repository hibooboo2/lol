// Code generated by go-bindata.
// sources:
// assets/item.html
// assets/summoner.html
// DO NOT EDIT!

package loltemplates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsItemHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xcd\x6a\x33\x21\x14\xdd\xe7\x29\xc4\xed\x07\xfa\x75\x11\x28\x65\x92\x45\x28\x6d\xb3\xe9\xa2\x6f\x60\xf4\xc6\x11\xfc\x63\x74\x02\x45\xe6\xdd\xcb\xfc\x24\x71\xa6\xa6\x34\x50\x57\xe3\xf5\x9e\xe3\xb9\xe7\xe0\xa4\x24\xe0\xa8\x2c\x20\xac\x22\x18\xdc\x75\x2b\x84\x10\xaa\x84\x3a\x21\xae\x59\x08\x9b\xb1\xbe\x1d\xca\xc3\x91\xdf\xa6\x44\xde\x99\x81\xae\xab\xa8\xcf\x0e\x94\x91\x28\x34\x7c\x83\x53\x22\x7b\x23\xbb\x0e\xa3\x1a\x94\xac\xe3\x06\x3f\xfe\xc7\x34\xeb\x3c\x34\xf9\x4e\xa8\xd3\x75\xd7\xaf\x94\xc8\x33\x04\xde\x28\x1f\x95\xb3\x93\xa4\xa1\x95\xce\x7a\x4b\x48\x75\x44\xe4\xa5\x71\x26\x43\x2d\x07\x0a\xc0\x7b\x5e\x3c\x87\x96\x09\xcf\xeb\x03\xb8\xf2\xf0\x1d\x40\x8b\x88\x94\x1a\x66\x25\x14\x95\x4c\x03\xbe\x45\xa3\x8b\x27\x60\x45\xa1\x9e\xeb\x97\x4e\x8b\x03\x0b\x50\x18\xa0\x5f\xff\x8a\xd5\x94\xc8\xab\xd3\x82\xec\x58\xe8\x83\xbb\x64\x55\xc7\xe8\x9f\x28\x15\xa2\x61\xd2\x59\xa2\x81\xc9\x16\xdc\x51\x83\x04\x2b\x02\xe1\xce\x50\x2e\x2c\x5d\x93\x35\x79\xa0\xca\x48\xda\x2a\xda\x0b\x20\xde\xca\x3c\xd3\x1f\x1c\x29\x94\x4a\x63\x8e\xd9\xed\x6d\x74\x7f\x9c\xdd\xae\x55\x5a\x04\xd4\x33\xdf\x1d\x60\x41\x4e\xe6\xe8\x1d\x21\xfe\xc2\x84\xac\x65\xfa\x3c\x77\xac\xe6\xaf\x34\x5c\x9e\x69\x1d\x8d\xce\xde\x43\x0d\x4c\x2c\xef\x88\x60\xbc\x66\x11\x10\xe6\xe1\x02\x1c\xef\x98\xb7\x57\x07\x27\x3e\x17\xc9\xb5\x7a\x49\x37\xf9\x72\xc3\x93\x4a\xab\x72\x06\x4b\x2d\xc3\x4f\xe5\x36\x0d\x5d\xf2\x94\x2d\xcd\xe5\x55\xf4\xaa\xbf\xa2\xa3\x31\x67\xd4\x57\x00\x00\x00\xff\xff\x56\x4a\x8d\xa6\xe5\x04\x00\x00")

func assetsItemHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsItemHtml,
		"assets/item.html",
	)
}

func assetsItemHtml() (*asset, error) {
	bytes, err := assetsItemHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/item.html", size: 1253, mode: os.FileMode(420), modTime: time.Unix(1517435802, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSummonerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x4d\x4e\xc5\x30\x0c\x84\xf7\x9c\xc2\xca\x01\xe2\x3d\x0a\x6f\xc3\x05\x90\x38\x41\xda\x98\x36\x90\x3f\xd9\x46\xa5\x8a\xde\xdd\x51\xa9\xa0\xaf\xbc\xac\x66\xa2\x99\xd1\x97\xf4\x1e\xe8\x2d\x16\x02\x23\x9f\x39\xd7\x42\x6c\xae\xd7\x07\x00\x00\x37\x6b\x4e\x97\x1f\xb9\x5b\xf2\xe1\xb0\xdb\xe9\x5d\x29\xb7\xe4\x95\xc0\x8c\x22\xbf\xc5\xbf\x86\x8c\x1c\x9b\x82\xf0\xf8\x64\x66\xd5\x26\x8f\x88\xcb\xb2\xd8\x0f\x5e\xeb\x44\x25\x7e\xd9\xca\x13\x8e\x35\x10\x0e\x5c\x17\x21\x46\xa9\xac\xea\x87\x44\x87\xb2\xef\x62\x2e\x0e\xf7\xb1\x1b\x1e\x3c\x03\xb9\xa1\x86\xf5\xcc\xe7\x1a\xd3\xf9\x66\xa7\xb6\xaf\xca\xb1\x4c\xff\x71\xf1\x2e\x7e\x7a\xe0\xec\x73\x4b\x51\xd4\x80\x7d\xde\xb4\xbc\x24\xbf\x52\xb8\x59\x71\x78\x30\x38\xdc\xbf\xaf\x77\x2a\x5b\xe6\x3b\x00\x00\xff\xff\xc9\x0e\x07\x32\x68\x01\x00\x00")

func assetsSummonerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSummonerHtml,
		"assets/summoner.html",
	)
}

func assetsSummonerHtml() (*asset, error) {
	bytes, err := assetsSummonerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/summoner.html", size: 360, mode: os.FileMode(420), modTime: time.Unix(1517414833, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/item.html": assetsItemHtml,
	"assets/summoner.html": assetsSummonerHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"item.html": &bintree{assetsItemHtml, map[string]*bintree{}},
		"summoner.html": &bintree{assetsSummonerHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

