// Code generated by go-bindata.
// sources:
// assets/champ.html
// assets/index.html
// assets/item.html
// assets/styles.html
// assets/summoner.html
// assets/summoner_game.html
// DO NOT EDIT!

package loltemplates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsChampHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x96\x5f\x4f\xdb\x30\x10\xc0\xdf\xf3\x29\x4e\x96\x78\x63\x29\xdb\x03\x0f\x6d\x5a\x09\xd1\x69\x9a\x80\x89\xad\x95\x78\x76\xe3\x6b\x62\xcd\x89\x23\xfb\xca\x1f\x59\xfe\xee\x53\x92\x42\x03\xc5\xc4\x23\x6f\xf1\xfd\xec\xbb\x9c\x7c\x3f\xc5\x39\x81\x5b\x59\x23\xb0\xbc\xe4\x55\xc3\xbc\x4f\x32\x32\x8b\x04\xf6\x4f\x46\x62\xe1\x1c\x61\xd5\x28\x4e\x08\x4c\x56\x05\x83\xf4\xb2\x65\x7f\x56\x85\xf7\x99\x90\xf7\x60\xe9\x49\xe1\x9c\xe5\x5a\x69\x33\x7d\x28\x25\xe1\xac\x44\x59\x94\x34\x3d\x9b\x3d\x48\x41\xe5\xf4\x8c\x2d\x9c\x4b\x7f\xf1\x0a\xbd\xcf\x26\x42\xde\x2f\xb2\x09\x89\xb7\x69\x1a\x23\x6b\xda\x02\x3b\x39\x4f\xbf\x6d\x19\xa4\x77\xb2\xfe\xc3\x49\x6a\xef\x4f\x3e\xc4\x7b\xfa\x6a\x79\xd1\x1e\x7e\xcc\xa5\x97\xab\x40\xe0\x4e\xd6\x36\x10\xba\xd6\xd6\x62\x28\x78\x25\x95\x0a\xc5\x96\xc8\xa9\x0c\x05\x2f\xac\x95\x96\x42\xd1\x5b\xac\x89\x87\x82\xbf\x77\x5c\x84\x62\x6b\x23\x1b\x15\xac\x76\xa9\x77\x9b\x70\xf4\x9a\x9b\x02\x2d\xb5\x9f\x24\xeb\x62\xd5\x18\xc4\x50\x16\x4d\x5c\x0d\xb9\x60\x39\x2d\xb8\xe4\x15\x2f\x70\x89\x5c\xd1\x5a\x77\x17\x26\x84\xdf\xf0\x42\xe6\xf1\xf8\x6d\xf9\x64\x65\xfe\x3f\x09\xd6\x66\x87\xf1\xf4\x0f\xad\xc4\x77\x6e\x6a\x14\x1f\x00\xab\x06\x6b\x0a\xa5\xdb\x19\x83\xf4\xea\x8e\x64\x93\x76\xa8\x9c\xc3\x5a\x78\x9f\x24\x87\xa9\x6b\xe7\xc9\xfb\xc3\x09\xb2\x2a\xc0\x9a\x7c\xce\x9c\x4b\xbd\x67\xd0\xcf\xd1\x9c\x9d\x9f\xb1\xc9\xe0\x80\xe4\xcd\xdc\x2a\x69\xa9\x9b\xdd\x6e\x14\x0f\x15\x11\xdf\x28\x3c\x25\x73\x4a\xc2\xbd\x2c\x3e\x3f\x1b\x6d\x04\x9a\x29\x7c\x6d\x1e\x61\xa3\x78\xfe\x17\x84\x26\x42\x31\x3b\x22\x09\x1f\xe9\x0b\x57\xb2\xa8\xa7\xa0\x70\x4b\xb3\xe4\x05\xf1\x49\x36\xd9\x27\xcd\xba\x6c\x90\x2b\x6e\xed\x9c\x59\x6d\xba\x77\x36\xec\x4f\x89\x7c\xd0\xaf\xc3\xba\x39\x5e\x1c\x36\xf5\x75\x9b\xdf\x23\xee\x64\x0d\x9d\x2b\xc6\xd1\xab\xe5\xc5\x38\x74\xb9\x8a\xca\x69\xc7\xa9\x5e\x24\x11\x65\xb5\xf7\x65\x1c\xeb\xf5\x32\xce\xed\x4d\x33\x0e\xf6\xd2\x19\xe7\x6e\xa4\xb5\x28\x20\x16\xdf\x2b\x29\xe2\x83\x7a\x3b\x45\x34\xb2\x17\x15\xec\x0d\x04\x9d\x82\xe2\xfa\xfa\x82\xc7\xd4\xd3\x89\x02\x3a\x53\xc0\x5a\x43\xef\x8a\x88\xfe\xb4\x16\x83\xcf\xee\x7e\x96\xda\xa7\x0f\x68\x1d\xf7\xe9\xcd\xad\xd1\xa0\x77\x5e\x24\xdc\xf9\x2f\xa2\xaa\x4e\x85\xf0\xc1\xdd\xee\xcd\x38\x78\x7b\xad\x88\x8c\x36\x5a\x3c\x1d\x6f\x73\xce\xf0\xba\x40\x48\x07\xf2\x3c\x66\x0e\xff\x2d\xfd\xdf\xcd\xbb\xf8\xb3\x54\x07\x35\xf4\x39\xb3\x49\x27\xb0\x83\x76\xff\x05\x00\x00\xff\xff\x9a\xdf\x2e\xe3\x2d\x09\x00\x00")

func assetsChampHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsChampHtml,
		"assets/champ.html",
	)
}

func assetsChampHtml() (*asset, error) {
	bytes, err := assetsChampHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/champ.html", size: 2349, mode: os.FileMode(420), modTime: time.Unix(1517414833, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\x41\x6a\xc6\x20\x10\x05\xe0\xbd\xa7\x18\xe6\x02\x5e\x20\x06\xba\xf8\x97\x49\xa1\xa1\xeb\xe2\x1f\x27\x44\x70\x54\xcc\x58\x52\xc4\xbb\x97\x96\x04\xba\xe8\x72\x98\xc7\xc7\x7b\xad\x39\xda\x7c\x24\x40\x1f\x1d\x9d\xd8\xbb\x1a\x76\xe1\x30\xaa\xd6\x84\x38\x07\x2b\x04\xb8\x1e\xc7\xef\x67\x4b\x85\xc1\xae\xe2\x53\x34\xa8\x8f\xca\x9c\x22\x15\x8d\xa3\x02\x00\x18\x7c\xcc\x55\x40\xbe\x32\x19\x14\x3a\x05\x21\x5a\x26\x83\xcb\xfb\x34\xbd\xce\x8f\xb7\x8f\xf9\x65\x7a\x20\xe4\x60\x57\xda\x53\x70\x54\x0c\x2e\x17\x32\x5b\x26\x04\x7d\x49\xcf\xa2\xff\x31\x97\xfa\x64\x2f\x08\x9f\x36\xd4\x3f\xe7\x1d\xfd\x69\xa7\x47\x35\xe8\x7b\x00\x45\xd7\xbb\xfa\x0e\x00\x00\xff\xff\xcf\xa4\x74\xac\xe3\x00\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 227, mode: os.FileMode(420), modTime: time.Unix(1517414833, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsItemHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcb\x21\x0e\xc3\x30\x0c\x05\x50\xee\x53\x58\x3e\x40\x3b\x30\x98\x96\x8f\xec\x0e\xd3\xe2\x25\x06\x0e\xd8\xa2\x91\xaf\x7f\xf7\x4a\x81\x0f\x3c\xa0\xfa\x27\x86\xab\xc5\xf4\x34\x52\x4a\x8d\xff\x29\xaa\xaa\xc0\xf6\x7c\xa5\x93\x4b\x25\xb2\xe9\xef\xfb\x3e\x0c\xd8\x1e\xd9\x48\xd3\xee\xd1\xfa\x3c\xec\x7e\xb3\xfd\x94\xb2\xaf\x0a\xf8\xa8\xa4\x5c\x01\x00\x00\xff\xff\x80\xab\xb1\xbf\x5b\x00\x00\x00")

func assetsItemHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsItemHtml,
		"assets/item.html",
	)
}

func assetsItemHtml() (*asset, error) {
	bytes, err := assetsItemHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/item.html", size: 91, mode: os.FileMode(420), modTime: time.Unix(1517415548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsStylesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcf\x6a\xc3\x30\x0c\x87\xef\x7e\x0a\xd1\x73\xd2\xb5\x83\x5d\xbc\xb2\x57\x29\xfe\xa3\xc6\x26\xaa\x1c\x6c\x05\xba\x19\xbf\xfb\x98\x59\x58\x76\xaa\x2e\x12\xe8\xf7\xe9\x03\xd5\xea\xf1\x16\x19\xe1\xe0\x4a\x39\xb4\xa6\x2e\x45\x3e\x09\x3f\x14\x00\x40\x90\x3b\x41\xed\xe3\x4f\x09\x3e\x64\x34\x14\x27\xd6\xe0\x90\x05\xf3\x7b\xdf\x35\xd5\x5b\xe4\x65\x95\x5d\xfc\x96\x58\xc6\x12\xbf\x50\xc3\x1b\xde\xb7\x68\x3f\x64\x2c\xe1\x20\x61\x90\x3c\x88\xff\x23\x6c\xca\x1e\xb3\x86\xf3\xf2\x00\x4b\xc6\xcd\xe0\x93\x08\xfa\x7f\x9a\xe3\xf5\x7c\x3a\xed\x34\xd6\xb8\x79\xca\x69\x65\x3f\xba\x44\x29\x6b\x08\x49\x96\xc8\xf3\xde\x78\xbc\xbe\x3e\x81\x28\x4e\x41\x2c\xad\xb8\x61\x97\x97\xdf\x4f\xd4\x8a\xec\x5b\x53\xdf\x01\x00\x00\xff\xff\xc9\x8f\x0e\x1a\x2b\x01\x00\x00")

func assetsStylesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsStylesHtml,
		"assets/styles.html",
	)
}

func assetsStylesHtml() (*asset, error) {
	bytes, err := assetsStylesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/styles.html", size: 299, mode: os.FileMode(420), modTime: time.Unix(1517414833, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSummonerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x4d\x4e\xc5\x30\x0c\x84\xf7\x9c\xc2\xca\x01\xe2\x3d\x0a\x6f\xc3\x05\x90\x38\x41\xda\x98\x36\x90\x3f\xd9\x46\xa5\x8a\xde\xdd\x51\xa9\xa0\xaf\xbc\xac\x66\xa2\x99\xd1\x97\xf4\x1e\xe8\x2d\x16\x02\x23\x9f\x39\xd7\x42\x6c\xae\xd7\x07\x00\x00\x37\x6b\x4e\x97\x1f\xb9\x5b\xf2\xe1\xb0\xdb\xe9\x5d\x29\xb7\xe4\x95\xc0\x8c\x22\xbf\xc5\xbf\x86\x8c\x1c\x9b\x82\xf0\xf8\x64\x66\xd5\x26\x8f\x88\xcb\xb2\xd8\x0f\x5e\xeb\x44\x25\x7e\xd9\xca\x13\x8e\x35\x10\x0e\x5c\x17\x21\x46\xa9\xac\xea\x87\x44\x87\xb2\xef\x62\x2e\x0e\xf7\xb1\x1b\x1e\x3c\x03\xb9\xa1\x86\xf5\xcc\xe7\x1a\xd3\xf9\x66\xa7\xb6\xaf\xca\xb1\x4c\xff\x71\xf1\x2e\x7e\x7a\xe0\xec\x73\x4b\x51\xd4\x80\x7d\xde\xb4\xbc\x24\xbf\x52\xb8\x59\x71\x78\x30\x38\xdc\xbf\xaf\x77\x2a\x5b\xe6\x3b\x00\x00\xff\xff\xc9\x0e\x07\x32\x68\x01\x00\x00")

func assetsSummonerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSummonerHtml,
		"assets/summoner.html",
	)
}

func assetsSummonerHtml() (*asset, error) {
	bytes, err := assetsSummonerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/summoner.html", size: 360, mode: os.FileMode(420), modTime: time.Unix(1517414833, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSummoner_gameHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xc1\x6e\xa3\x30\x10\x86\xef\x79\x0a\xcb\xf7\x85\xdd\xed\x2d\x81\x1c\xda\x5e\xb8\x54\x91\xd2\x7b\x34\xc1\x83\xb1\x64\x1b\x64\x3b\x51\x90\xc5\xbb\x57\x81\x44\x41\x81\x98\xb4\xea\xd1\x9e\x7f\xbe\xf1\x3f\x30\xe3\x3d\xc3\x42\x68\x24\x54\x8a\x23\xee\x38\x28\xa4\x6d\xbb\x48\x4a\xa7\xe4\x7a\x41\x08\x21\xde\x3b\x54\xb5\x04\x87\x84\xe6\xd6\x9e\xa3\xe7\xeb\x64\x5f\xb1\xa6\x57\x74\x47\x07\x7b\x89\xb7\x73\x7f\x57\xae\xb7\x07\x95\xe5\x95\x4e\x62\x57\x8e\x83\x1b\x09\x0d\x9a\x71\xcc\x7b\x51\x90\xe8\x15\xb4\x46\xf6\x56\x82\xaa\x45\xa5\xed\xa5\xee\x30\xbf\x57\x90\x4e\x32\x45\x41\xcd\xee\xb2\xbc\x37\xa0\x39\x92\x68\x03\xc6\x89\x5c\xd4\xa0\xdd\x3d\xb9\xa7\x1b\x92\x4b\xb0\x36\xa5\x3b\xef\xa3\x4f\x04\x95\xbd\xb7\x2d\x5d\x8f\x94\xbd\x9a\x4d\x07\xee\xfb\x27\x14\xa7\x24\xda\x98\xaa\x10\x12\xcf\x7d\xc9\x14\x70\x9c\xa8\xdf\x51\xe3\x47\xd8\x60\xbd\x84\x89\x23\xb1\xae\x91\x98\x52\x26\x6c\x2d\xa1\x59\x16\x12\x4f\x2b\x87\x27\xf7\x07\xa4\xe0\x7a\x99\xa3\x76\x68\x56\x0f\xec\x0c\x49\x61\xc5\xb4\xbf\xeb\x27\x0b\x99\xbb\x99\x9c\x2d\x32\x65\x88\x1b\xc1\xe6\x9e\xdf\xe5\x0a\xc5\x89\x35\x79\x4a\xbd\x8f\xb6\x35\x4a\xf9\x2f\x53\xbc\x6d\x29\x29\x51\xf0\xd2\xa5\xf4\xe5\x2f\x8d\x7f\xc2\xf9\xff\x6d\xce\x33\x56\xeb\x67\xfa\x1d\x6d\x0f\x4a\x55\x1a\xcd\x07\xa8\xf9\xfe\x06\x90\x81\x17\x3d\xfe\xf9\x86\xc3\xd9\xf5\xe0\x37\x46\x62\x16\x17\x78\xce\x78\xca\x2f\x19\x26\xbc\x0f\x92\x78\xb0\xb3\x92\xb8\xdf\x67\x49\xdc\x6f\xbe\xab\xf8\x2b\x00\x00\xff\xff\x80\xe6\xb1\x4d\x20\x05\x00\x00")

func assetsSummoner_gameHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSummoner_gameHtml,
		"assets/summoner_game.html",
	)
}

func assetsSummoner_gameHtml() (*asset, error) {
	bytes, err := assetsSummoner_gameHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/summoner_game.html", size: 1312, mode: os.FileMode(420), modTime: time.Unix(1517414833, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/champ.html": assetsChampHtml,
	"assets/index.html": assetsIndexHtml,
	"assets/item.html": assetsItemHtml,
	"assets/styles.html": assetsStylesHtml,
	"assets/summoner.html": assetsSummonerHtml,
	"assets/summoner_game.html": assetsSummoner_gameHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"champ.html": &bintree{assetsChampHtml, map[string]*bintree{}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"item.html": &bintree{assetsItemHtml, map[string]*bintree{}},
		"styles.html": &bintree{assetsStylesHtml, map[string]*bintree{}},
		"summoner.html": &bintree{assetsSummonerHtml, map[string]*bintree{}},
		"summoner_game.html": &bintree{assetsSummoner_gameHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

